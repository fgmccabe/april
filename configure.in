dnl Process this file with autoconf to produce a configure script.
AC_INIT(April/Headers/signature.h)
AM_INIT_AUTOMAKE(april,5.0.0-beta-14)

dnl Add macros to aclocal include list
ACLOCAL="aclocal -I macros"

dnl We want a configuration header file
AM_CONFIG_HEADER(config.h)

dnl We prefer to install in /opt
AC_PREFIX_DEFAULT(/opt/april)

dnl enable/disable ANSI colours in output
AC_ARG_ENABLE(colours,
[  --enable-colours        Turn on ANSI colours in output [default=no]],
[case "${enableval}" in
   no)
	AC_DEFINE(NOCOLOURS, 1, [Define NOCOLOURS to prevent ANSI output])
	;;
  yes)
        ;;
 esac],
dnl colours disabled by default.
[AC_DEFINE(NOCOLOURS, 1, [Define NOCLOURS to prevent ANSI output])])

dnl Set up debugging flag
AC_ARG_ENABLE(debug,
[  --enable-debug          Turn on debugging code],
[case "${enableval}" in
  yes)
	CFLAGS='-g -Wall'
	AC_DEFINE(ALLTRACE, 1, [Turn on tracing])
	;;
  profile)
	CFLAGS='-g -pg -Wall'
	AC_DEFINE(ALLTRACE, 1, [Turn on tracing])
	;;
	
  high)	CFLAGS='-O2 -g -Wall'
	AC_DEFINE(ALLTRACE, 1, [Turn on tracing])
      	;;

  semi)	CFLAGS='-g -Wall'
      	;;

  no)  	CFLAGS='-O3 -fomit-frame-pointer -Wall'
       	AC_DEFINE(NDEBUG, 1, [Optimise assertions])
      	;;
  *)# AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac],[CFLAGS='-O3 -Wall'
AC_DEFINE(NDEBUG, 1, [Optimise assertions])])

dnl Pick up where april is, in order to allow cross compilation
AC_ARG_WITH(april,
[  --with-april[=dir]        Indicate location of an existing april installation],
[aprildir=${withval}
 aprilexec=${withval}/bin/april
 aprilc=${withval}/bin/apc],
[aprildir=\${top_builddir}/April
  aprilexec=\${top_builddir}/April/Engine/april
  aprilc=\${top_builddir}/April/Compiler/apc
])

AC_SUBST(aprilc)
AC_SUBST(aprilexec)
AC_SUBST(aprildir)

dnl Figure out where to put the html stuff
AC_ARG_WITH(htmldir,
[  --with-html[=PREFIX/html]       Indicate location of the html dir],
[htmldir=${withval}],
[htmldir='${prefix}/html'])

AC_SUBST(htmldir)


dnl Pick up where ooio library


AC_MSG_CHECKING([Looking for the the ooio library])
AC_ARG_WITH(ooio,
[  --with-ooio[=dir]        Indicate location of the ooio library],
[ooiodir=${withval}],
[ooiodir='/opt/nar/ooio']
)

AC_SUBST(ooiodir)
AC_MSG_RESULT(${ooiodir})

dlibext=.so

dnl Check for system type
AC_CANONICAL_HOST

case "$host_os" in
  solaris* )
    echo Set up for System V 
    AC_DEFINE(SYSV,1,[Check if we have a system 5 set up or not])
    ;;
  linux-* )
    april_LDFLAGS=-rdynamic
    ;;
  darwin* )
    dlibext=
    ;;
  *)
    echo Other OS $host_os
    ;;
esac
AC_SUBST(april_LDFLAGS)
AC_SUBST(dlibext)
AC_DEFINE_UNQUOTED(DLIBEXT,$dlibext,[Extension for dynamically loaded libraries])

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_INSTALL
AM_PATH_LISPDIR
AC_PATH_PROG(TEXI2HTML, texi2html, :, $PATH:/usr/bin:/usr/local/bin)
AC_PATH_PROG(TEXI2PDF, texi2pdf, :, $PATH:/usr/bin:/usr/local/bin)

AC_MSG_CHECKING([if compiler allows zero array size])
save_cflags="$CFLAGS"
CFLAGS="$CFLAGS -Werror"
AC_TRY_COMPILE([],
[
struct {
  int one;
  char somemore[];
} foo;

foo.one = 1;
],
AC_DEFINE(ZEROARRAYSIZE,, [How to specify a zero array size])
AC_MSG_RESULT(no),
AC_DEFINE(ZEROARRAYSIZE, 0, [How to specify a zero array size])
AC_MSG_RESULT(yes))
CFLAGS="$save_cflags"

dnl Define libtool
AM_PROG_LIBTOOL

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h sys/time.h syslog.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

AC_MSG_CHECKING([for alignment of long long])
AC_CACHE_VAL(april_llong_alignment,
[AC_TRY_RUN([
int main(){
  long v1;
  long long v2;
  struct {
    long v1;
    long long v2;
  } v3;

  if(sizeof(v3)==sizeof(v1)+sizeof(v2))
    exit(0);
  else
    exit(1);
}],
april_llong_alignment=align32,
april_llong_alignment=align64,
april_llong_alignment=align64)])

if test $april_llong_alignment = align64; then
  AC_DEFINE(LLONG_ALIGNMENT,1,[long long alignment is necessary])
else
  AC_DEFINE(LLONG_ALIGNMENT,0,[long long alignment is unnecessary])
fi
AC_MSG_RESULT($april_llong_alignment)
 
AC_MSG_CHECKING([for alignment of double])
AC_CACHE_VAL(april_double_alignment,
[AC_TRY_RUN([
int main(){
  long v1;
  double v2;
  struct {
    long v1;
    double v2;
  } v3;

  if(sizeof(v3)==sizeof(v1)+sizeof(v2))
    exit(0);
  else
    exit(1);
}],
april_double_alignment=align32,
april_double_alignment=align64,
april_double_alignment=align64)])

if test $april_double_alignment = align64; then
  AC_DEFINE(DOUBLE_ALIGNMENT,1,[double alignment is necessary])
else
  AC_DEFINE(DOUBLE_ALIGNMENT,0,[double alignment is unnecessary])
fi
AC_MSG_RESULT($april_double_alignment)

AC_CACHE_VAL(april_word16,
[
AC_CHECK_SIZEOF(long,4)
AC_CHECK_SIZEOF(int,4)
AC_CHECK_SIZEOF(short int,2)

if test $ac_cv_sizeof_int = 2; then
  april_word16="int"
elif test $ac_cv_sizeof_short_int = 2; then
  april_word16="short int"
elif test $ac_cv_sizeof_long = 2; then
  april_word16="long"
else
  AC_MSG_ERROR([cant determine a 16 bit int type])
fi
])
AC_DEFINE_UNQUOTED(WORD16,$april_word16,[Define with a type that is 16 bits long])

AC_CACHE_VAL(april_word32,
[
AC_CHECK_SIZEOF(long,4)
AC_CHECK_SIZEOF(int,4)
AC_CHECK_SIZEOF(short int,2)

if test $ac_cv_sizeof_int = 4; then
  april_word32="int"
elif test $ac_cv_sizeof_short_int = 4; then
  april_word32="short int"
elif test $ac_cv_sizeof_long = 4; then
  april_word32="long"
else
  AC_MSG_ERROR([cant determine a 32 bit int type])
fi
])
AC_DEFINE_UNQUOTED(WORD32,$april_word32,[Define with a type that is 32 bits long])

AC_MSG_CHECKING([32 bit int type])
AC_MSG_RESULT($april_word32)
 
AC_CACHE_VAL(april_word64,
[
AC_CHECK_SIZEOF(long long,8)
AC_CHECK_SIZEOF(long,4)

if test $ac_cv_sizeof_long_long = 8; then
  april_word64="long long"
elif test $ac_cv_sizeof_long = 8; then
  april_word64="long"
else
  AC_MSG_ERROR([cant determine a 64 bit int type])
fi
])
AC_DEFINE_UNQUOTED(WORD64,$april_word64,[Define with a type that is 64 bits long])

AC_MSG_CHECKING([64 bit int type])
AC_MSG_RESULT($april_word64)

AC_MSG_CHECKING([getopt accepts '+' prefix])
AC_TRY_RUN([
#include <unistd.h>
extern int optind;
int main(int a, char *v[])
{
	int argc = 3;
	char *argv[4] = { "self", "arg", "-h", NULL };

	/* Returns success (zero) if -h option is detected (ie. getopt permutes) */

	if (getopt(argc, argv, "+h") == -1) {
		optind = 0; 
		if (getopt(argc, argv, "h") == 'h')
			return 0;
	}

	return 1;
}
],
AC_DEFINE(GNU_GETOPT_NOPERMUTE, "+", [make getopt posixly compliant (non-permuting)])
AC_MSG_RESULT("yes"),
AC_DEFINE(GNU_GETOPT_NOPERMUTE, "", [getopt does not support + prefix])
AC_MSG_RESULT("no"),
AC_DEFINE(GNU_GETOPT_NOPERMUTE, "", [getopt is non-permuting by default])
AC_MSG_RESULT("no")
)
 
dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(gethostname gettimeofday select socket strerror strtol getdtablesize getrlimit)
AC_CHECK_LIB(m,log10)
AC_CHECK_LIB(socket,socket)
AC_CHECK_LIB(nsl,inet_ntoa)
AC_REPLACE_FUNCS(memmove)
AC_REPLACE_FUNCS(memcmp)
AC_REPLACE_FUNCS(setenv)


dnl enable/disable dynamically loaded extensions to April
AC_ARG_ENABLE(dynext,
[  --enable-dynext         Enable dynamically loaded extensions to April [default=yes]],
[case "${enableval}" in
   yes)
	AC_DEFINE(DYNAMICEXT, 1, [Enable dynamically loaded extensions in April])
        AC_CHECK_LIB(dl,dlopen)
	;;
   no)
        ;;
 esac],
dnl extensions enabled by default
[
        AC_CHECK_LIB(dl,dlopen)
])

AC_OUTPUT(Makefile April/Makefile
	April/Headers/Makefile
	April/april.Make
	April/Compiler/Makefile April/Compiler/Headers/Makefile
	April/Engine/Makefile
	April/Engine/Headers/Makefile April/april/Makefile
	April/Engine/Doc/Makefile
	April/Utilities/Makefile April/include/Makefile
	April/Samples/Makefile April/Samples/Test/Makefile
	April/Samples/Suite/Makefile
	April/Script/Makefile
	April/Alex/Makefile April/Alex/Doc/Makefile April/Alex/alex
	April/Apg/Makefile April/Apg/Doc/Makefile April/Apg/apg
        April/SCS/Makefile April/SCS/scs
        April/Dx/Makefile
	Doc/Makefile
	april.spec)

