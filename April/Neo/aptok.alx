/*
 * Lexical rules for April 
 */

#include "ap_tok.ah";

%%

-- Standard April keywords

-- Identifier rule

[a-zA-Z_][a-zA-Z_0-9]*		=>	{ ID(yyTok) }

-- Number rules

[0-9]+				=>	{ NUM(tok2Num(yyTok)) }
"0x"[0-9a-fA-F]+		=> 	{ NUM(tok2Num(yyTok)) }
[0-9]+"."[0-9]+([eE][-+]?[0-9]+)? => 	{ NUM(tok2Num(yyTok)) }

-- String rule
"\""([^\\\"]|"\\"([^0]|"0"[0-7]*))*"\"" => { STR(tok2Str(yyTok)) }

"''"([^\\]|"\\"([^0]|"0"[0-7]*)) => 	{ DQUOTE(dequoteStr(tail(yyTok,2))) }

-- Punctuation
";"				=>	{ SEMI }
","				=>	{ COMMA }
",.."				=>	{ CONS }
"'"				=>	{ QUOTE }
"("				=>	{ LPAR }
")"				=>	{ RPAR }
"["				=>	{ LBRA }
"]"				=>	{ RBRA }
"{"				=>	{ LBRC }
"}"				=>	{ RBRC }

-- White space and comments
[ \n\t\b\r]+			=> skip     	-- ignore white space

"--".*"\n"		       	-- line comment

"/*" => <comment>        	-- continuous comment

<comment> "*/" => <initial>
<comment> .	         	-- implies a skip
<comment> "\n"	         	-- new lines must be explicit

-- Graphic symbol rules

[-!@#$%^&/*=+:.<>?\\|`~]+	=>	{ ID(yyTok) }
",+"				=>	{ ID(yyTok) }
%%

-- The postamble

tok2Num(token) => number%%(string%%token);

dequoteStr = {
  [] => []
| [''\\,C,..L] => [qtChar(C),..dequoteStr(L)]
| [C,..L] => [C,..dequoteStr(L)]
};

qtChar = {
  ''a => ''\a
| ''b => ''\b
| ''d => ''\d
| ''e => ''\e
| ''f => ''\f
| ''n => ''\n
| ''r => ''\r
| ''t => ''\t
| ''v => ''\v
| X => X
};
 

tok2Str([''\",..X]) => dequoteStr(front(X,listlen(X)-1));

