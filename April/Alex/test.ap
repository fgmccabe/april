/* Automatically generated lexer from "test.alx" by Alex*/
-- A Test alex file

-- The preamble ...

#include "token.ah";

module
{
failedMatch(yyTok,yyPos,yyLPos,yyLine, _, _, _, _)=>
    exception error("lexing failed at line "++yyLine^0++"/"++yyPos^0,
                    'failed);
yyNextToken(input,ipos,iline,yyFile) => valof {
  yyState : 0; yyString : input; 
  yyPos:ipos; yyIPos:ipos; yyLPos:ipos; yyLine:iline; yyLLine:iline;
  yyNext : -1; yyFinal : failedMatch; 
  yyRest : input; yyLast : []; yyTk : [];
  while true do {
    case yyState in {
      -1 -> {
              if yyNext!= -1 then {
                yyState := yyNext; yyTk := [];
                yyIPos := yyLPos; yyLine := yyLLine;
                yyNext := -1; yyString := yyRest;
              }
              else {
                env = {
                  S : yyRest;
                  getBuf() => S;
                  setBuf(newS) { S := newS; };
                  getCh() => valof {
                    if S == [] then
                       valis ''ÿ
                    else {
                       [C,..R] = S;
                       S := R;
                       valis C;
                    }
                  };
                  putCh(C) {
                    S : [C,..S];
                  };
                };
                tok = yyFinal(yyRev(yyLast),yyIPos,yyLPos,yyLLine,env.getCh,env.putCh,env.getBuf,env.setBuf);                valis ((env.getBuf(),yyLPos,yyLLine,yyFile),tok)
		   }
            }
    | 18 -> {
	yyState := 0;		-- restart in initial state
	yyTk := []; yyIPos := yyPos;
      }
    | 17 -> {
	try {
	  yyNext := 15;		-- go to comment state
	  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine;
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(0,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 16 -> {
	yyState := 15;		-- restart in comment state
	yyTk := []; yyIPos := yyPos;
      }
    | 15 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(1,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 14 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(2,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 13 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ INT(number%%(string%%yyTok))},yyFile=yyFile)}};
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(2,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 12 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(3,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 11 -> {
	yyState := 0;		-- restart in initial state
	yyTk := []; yyIPos := yyPos;
      }
    | 10 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ INT(number%%(string%%yyTok))},yyFile=yyFile)}};
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(4,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 9 -> {
	yyState := 15;		-- restart in comment state
	yyTk := []; yyIPos := yyPos;
      }
    | 8 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(5,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 7 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(6,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 6 -> {
	try {
	  yyNext := 0;		-- go to initial state
	  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine;
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(7,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 5 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(8,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 4 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(9,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 3 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ INT(number%%(string%%yyTok))},yyFile=yyFile)}};
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(10,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 2 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ ID(string%%yyTok) },yyFile=yyFile)}};
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(11,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 1 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok=EOF,yyFile=yyFile)}};
        yyState := -1
      }
    | 0 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''ÿ] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then yyLine := yyLine+1;
	  yyState := yyTrans(12,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    }
  }
};
yyChInRange(X, From, To) => X != ''\+ffff && From <= X && X <= To;
yyTrans = {
  (12,yyChar) => (case yyChar in {
	    ''\b => 6
	|   ''\t => 6
	|   ''\n => 6
	|   ''\r => 6
	|   ''  => 6
	|   ''- => 4
	|   ''/ => 5
	|   X::yyChInRange(X,''0,''9) => 3
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''z) => 2
	|   ''ÿ => 1
	})
| (11,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''z) => 2
	})
| (10,yyChar) => (case yyChar in {
	    ''. => 7
	|   X::yyChInRange(X,''0,''9) => 3
	})
| (9,yyChar) => (case yyChar in {
	    ''- => 8
	|   X::yyChInRange(X,''0,''9) => 3
	})
| (8,yyChar) => (case yyChar in {
	    ''* => 9
	})
| (7,yyChar) => (case yyChar in {
	    ''\b => 6
	|   ''\t => 6
	|   ''\n => 6
	|   ''\r => 6
	|   ''  => 6
	})
| (6,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''0,''9) => 10
	})
| (5,yyChar) => (case yyChar in {
	    ''\a => 8
	|   ''\b => 8
	|   ''\t => 8
	|   ''\v => 8
	|   ''\f => 8
	|   ''\r => 8
	|   ''\e => 8
	|   X::yyChInRange(X,'' ,''\d) => 8
	|   ''\n => 11
	})
| (4,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''0,''9) => 10
	|   ''E => 12
	|   ''e => 12
	})
| (3,yyChar) => (case yyChar in {
	    ''+ => 14
	|   ''- => 14
	|   X::yyChInRange(X,''0,''9) => 13
	})
| (2,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''0,''9) => 13
	})
| (1,yyChar) => (case yyChar in {
	    ''\a => 16
	|   ''\b => 16
	|   ''\t => 16
	|   ''\v => 16
	|   ''\f => 16
	|   ''\r => 16
	|   ''\e => 16
	|   X::yyChInRange(X,'' ,'')) => 16
	|   X::yyChInRange(X,''+,''\d) => 16
	|   ''* => 17
	})
| (0,yyChar) => (case yyChar in {
	    ''/ => 18
	})
};

yyRev(L) => valof {  -- non-recursive reverse
  R : []; LL : L;
  while [E,..EE].=LL do {
    R := [E,..R];
    LL := EE;
  };
  valis R
};

-- The postamble


} export yyNextToken;
