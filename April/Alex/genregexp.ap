/*
 * Parse a string and generate a regular expression structure from it
 */

/*

  A rule file looks like:

  preamble (including type definition of final tokens)

  %%

  rules

  %% 

  extra-definitions


  A rule looks like:

  rule::= 
    <state> regexp => cmd		-- do cmd on a regexp
  | regexp => cmd			-- do cmd on a regexp

  A cmd looks like

  cmd::= skip				-- restart the tokeniser
  | <state>				-- restart the tokeniser in state
  | (final)				-- an expression giving the final token

  A regular expression looks like:

   regexp ::= 
       .				-- any character
     | eof                              -- the end of file
     | [chars]				-- selection of characters
     | [^chars]				-- negative selection of characters
     | "echar*"				-- literal string
     | 'echar*'				-- case-insensitive literal string
     | (regexp)				-- parenthesising
     | regexp|regexp			-- disjunction
     | regexp regexp			-- concatenation of two regexps
     | regexp *
     | regexp +
     | regexp ?				-- optional re

   chars ::= char-char			-- range of characters
     | echar				-- regular or escape char

   echar ::= \escape			-- escape character
     | char				-- regular character

   escape ::= a				-- alarm
     | b				-- backspace
     | d				-- delete
     | e				-- escape
     | f				-- form feed
     | n				-- new line
     | r				-- carriage return
     | t				-- tab
     | v				-- vertical feed
     | oct				-- octal encoded character
     | char				-- other chars are quoted

*/  

#include "regexp.ah";

module
  import interface <stdio.af>
in{

  parseAfile(Text) => collect {
    Txt : Text;
    while Txt != [] && (TT,State,RE).=parseRule(Txt) do {
      elemis (State,RE);
      Txt := TT;
    };
    elemis ("initial",finalRE(ordRE(''\+ffff),final("EOF")));
  };

  parseRule(Text) => valof {
    (R,State) .= parseState(skipBlanks(Text));
    (RR,RE) .= parse(R);
    (RRR,Final) .= parseCmd(RR,RE,State);
    valis (RRR,State,Final);
  };

  parseState = {			-- a rule may be preceded by a state
    [''<,..R] => valof{
      (RR,S) .= grabChars(R,[],''>);
      valis (RR,string%%reverse(S))
    }
  | R => (R,"initial")			-- default state name
  };

  parseCmd(R,RE,CState) => valof {
    if [''=,''>,..RR] .=skipBlanks(R) then {	-- look for a =>
      case skipBlanks(RR) in {
        [''s,''k,''i,''p,..X] -> valis(skipBlanks(X),finalRE(RE,state(CState)))
      | [''<,..X] -> {
          (XX,S) .= grabChars(X,[],''>);
          valis (skipBlanks(XX),finalRE(RE,state(string%%reverse(S))))
        }
      | [''\(,..X] -> {			-- evaluate an expression 
          (XX,S) .= grabExpr(X,[''(],''\));
          valis (skipBlanks(XX),finalRE(RE,final(string%%reverse(S))))
        }
      | [''\{,..X] -> {			-- evaluate an expression 
          (XX,S) .= grabExpr(X,[''{],''\});
          valis (skipBlanks(XX),finalRE(RE,final(string%%reverse(S))))
        }
      | _ -> {
	  "Command specification expected at ["++string%%rLne(RR)++"]\n">>stderr;
	  valis (RR,finalRE(RE,state(CState)))
        }
      }
    }
    else
      valis (skipBlanks(R),finalRE(RE,state(CState)))
  };
  
  openParen(P) => P in [''\{, ''\[, ''\(];
  closeParen = {
    ''\{ => ''\}
  | ''\[ => ''\]
  | ''\( => ''\)
  };
  
  -- grab a bracketted April expression (doesn't support comments)
  grabExpr = {
    ([C,..R], Acc, C) => (R, [C,..Acc])
  | ([P,..R], Acc, C)::openParen(P) => valof {
      (RR, Acc1) = grabExpr(R, [P,..Acc], closeParen(P));
      valis grabExpr(RR, Acc1, C)
    }
  | ([''\",..R], Acc, C) => valof {
      (RR, Acc1) = grabStr(R, [''\",..Acc]);
      valis grabExpr(RR, Acc1, C)
    }
  | ([X,..R], Acc, C) => grabExpr(R, [X,..Acc], C)
  };
  
  grabStr = {
    ([''\\,''\",..R], Acc) => grabStr(R, [''\", ''\\,..Acc])
  | ([''\",..R], Acc) => (R, [''\",..Acc])
  | ([X,..R], Acc) => grabStr(R, [X,..Acc])
  };
      
  rLne = {
    [] => []
  | [''\n,.._] => []
  | [C,..L] => [C,..rLne(L)]
  };

  skipBlanks(L) => valof{
    LL : L;
    
    while true do{
      case LL in {
        [''\ ,..R] -> LL := R
      | [''\t,..R] -> LL := R
      | [''\n,..R] -> LL := R
      | [''-,''-,..R] -> {
          LL := R;
          while [C,..X].=LL && C!=''\n do
            LL := X;
        }
      | [''/,''*,..R] -> 
          LL := skipToStarSlash(R)
      | _ -> valis LL
      }
    }
  };

  skipToStarSlash(L) => valof{
    LL : L;
    while true do{
      if [''*,''/,..R].=LL then
        valis R
      else if [_,..R].=LL then
        LL := R
    }
  };
    
  parse(T) => valof{
    (R,L) = parseL(skipBlanks(T));
    valis parseR(R,L)
  };

  parseL = {
    [''.,..R] => (R,periodRE)
  | [''\[,''^,..R] => valof {
      (RR,L) .= grabChars(R,[],''\]);
      valis (RR,negCharsRE(reverse(L\/[''\+ffff])))
    }
  | [''\[,..R] => valof {
      (RR,L) .= grabChars(R,[],''\]);
      valis (RR,charsRE(reverse(L)))
    }
  | [''\',..R] => valof {
      (RR,L) .= strChars(R,[],''\');
      valis (RR,caseInsensLitRE(reverse(L)))
    }
  | [''\",..R] => valof {
      (RR,L) .= strChars(R,[],''\");
      valis (RR,seqRE(reverse(L)))
    }
  | [''\(,..R] => valof {
      ([''\),..RR],RE) .= parse(R);
      valis (RR,RE)
    }
  | [''e,''o,''f,..R] => (R,ordRE(''\+ffff))
  };
  
  caseInsensLitRE = {
    [] => emptyRE
  | [X] => caseInsensChRE(X)
  | [X,..R] => catRE(caseInsensChRE(X),caseInsensLitRE(R))
  };
  
  caseInsensChRE = {
    X::isAlphaCh(X) => charsRE([toLowerCh(X),toUpperCh(X)])
  | X => charsRE([X])
  };
  
  isLowerCh(X) => rangeCh(X, ''a, ''z);
  isUpperCh(X) => rangeCh(X, ''A, ''Z);
  isAlphaCh(X) => isLowerCh(X) || isUpperCh(X);
  rangeCh(X, From, To) => charCode(From) <= charCode(X) && charCode(X) <= charCode(To);
  toLowerCh = {
    X::isUpperCh(X) => charOf(charCode(X) - charCode(''A) + charCode(''a))
  | X => X
  };
  toUpperCh = {
    X::isLowerCh(X) => charOf(charCode(X) - charCode(''a) + charCode(''A))
  | X => X
  };

  parseR = {
    ([''\|,..R],Left) => valof {
      {
	(RR,RE) .= parse(R);
        valis parseR(RR,orRE(Left,RE));
      }
    }
  | ([''\),..R],Left) => ([''\),..R],Left)
  | ([],Left) => ([],Left)
  | (['' ,..R],Left) => (['' ,..R],Left)
  | ([''\n,..R],Left) => ([''\n,..R],Left)
  | ([''\t,..R],Left) => ([''\t,..R],Left)
  | ([''-,..R],Left) => ([''-,..R],Left)
  | ([''=,..R],Left) => ([''=,..R],Left)
  | ([''*,..R],Left) => parseR(R,starRE(Left))
  | ([''+,..R],Left) => parseR(R,plusRE(Left))
  | ([''?,..R],Left) => parseR(R,optRE(Left))
  | (L,Left) => valof {
      (RR,RE) .= parse(L);
      valis parseR(RR,catRE(Left,RE));
    }
  };
  
  grabChars = {
    ([C,..R],L,C) => (R,L)
  | ([''\\,..R],L,K) => valof {
      (RR,C) .= esc_char(R);
      valis grabChars(RR,[C,..L],K)
    }
  | ([F,''-,T,..R],L,K) => grabChars(R,genChars(F,T)<>L,K)
  | ([C,..R],L,K) => grabChars(R,[C,..L],K)
  };

  genChars(F,T) => charCode(F)..charCode(T)//charOf;
    
  strChars = {
    ([C,..R],L,C) => (R,L)
  | ([''\\,..R],L,K) => valof {
      (RR,C) .= esc_char(R);
      valis strChars(RR,[C,..L],K)
    }
  | ([C,..R],L,K) => strChars(R,[C,..L],K)
  };
  
  esc_char = {
    [''a,..L] => (L,''\a)		-- alarm
  | [''b,..L] => (L,''\b)		-- backspace
  | [''d,..L] => (L,''\d)		-- delete
  | [''e,..L] => (L,''\e)		-- escape
  | [''f,..L] => (L,''\f)		-- form feed
  | [''n,..L] => (L,''\n)		-- new line
  | [''r,..L] => (L,''\r)		-- carriage return
  | [''t,..L] => (L,''\t)		-- tab
  | [''v,..L] => (L,''\v)		-- vertical feed
  | [''0,..L] => oct_char(L,0,2)	-- octal sequence
  | [''1,..L] => oct_char(L,1,2)
  | [''2,..L] => oct_char(L,2,2)
  | [''3,..L] => oct_char(L,3,2)
  | [''4,..L] => oct_char(L,4,2)
  | [''5,..L] => oct_char(L,5,2)
  | [''6,..L] => oct_char(L,6,2)
  | [''7,..L] => oct_char(L,7,2)
  | [C,..L] => (L,C)			-- other chars are quoted
  };

  oct_char = {				-- count up to C octal chars
    ([''0,..L],X,C::C>0) => oct_char(L,X*8,C-1)
  | ([''1,..L],X,C::C>0) => oct_char(L,X*8+1,C-1)
  | ([''2,..L],X,C::C>0) => oct_char(L,X*8+2,C-1)
  | ([''3,..L],X,C::C>0) => oct_char(L,X*8+3,C-1)
  | ([''4,..L],X,C::C>0) => oct_char(L,X*8+4,C-1)
  | ([''5,..L],X,C::C>0) => oct_char(L,X*8+5,C-1)
  | ([''6,..L],X,C::C>0) => oct_char(L,X*8+6,C-1)
  | ([''7,..L],X,C::C>0) => oct_char(L,X*8+7,C-1)
  | (L,X,_) => (L,charOf(X))
  };

					-- a linear iterative reverve
  reverse(L) => valof {
    R : [];
    LL : L;
    while [X,..Y].=LL do {
      R := [X,..R];
      LL := Y;
    };
    valis R;
  };

  displayRE = {
    (ordRE(''\+ffff),out) -> "<eof>">>out
  | (ordRE(X),out) -> "\""++X^0++"\"">>out
  | (orRE(L,R),out) -> {
      " ( " >> out;
      displayRE(L,out);
      " | " >> out;
      displayRE(R,out);
      " ) " >> out
    }
  | (catRE(L,R),out) -> {
      " ( " >> out;
      displayRE(L,out);
      displayRE(R,out);
      " ) " >> out
    }
  | (starRE(L),out) -> {
      displayRE(L,out);
      "*" >> out
    }
  | (plusRE(L),out) -> {
      displayRE(L,out);
      "+" >> out
    }
  | (optRE(L),out) -> {
      displayRE(L,out);
      "?" >> out
    }
  | (seqRE(L),out) -> {
      "\"" >> out;
      for C in L do
        string%%C>>out;        
      "\"" >> out;
    }
  | (charsRE(L),out) -> {
      "[" >> out;
      for C in L do
        string%%C>>out;        
      "]" >> out;
    }
  | (negCharsRE(L),out) -> {
      "[^" >> out;
      for C in L do
        string%%C>>out;        
      "]" >> out;
    }
  | (periodRE,out) ->
      "." >> out
  | (finalRE(L,F),out) -> {
      displayRE(L,out);
      " => "++F^0 ++ "\n" >> out
    }
  };

  -- try to find the token type definition by looking for an include command
  -- in the preamble

  findExtraTokenType(preamble) => valof{
    txt : preamble;
    while _<>[''#,''i,''n,''c,''l,''u,''d,''e,'' ,''\",..T] .= txt do{
      (TT,[''\",..FN]) .= grabStr(T,[]);
      txt := TT;

      fn = reverse(FN);

      _file_stat(_,_,_,_,_,_,_,count.=size,_,_,_,_,_) = fstat(fn);
      f = fopen(fn,_open_read);

      t = inchars(f,count);
      fclose(f);

      if _++"yyTokType?yyTok"++r++")"++_ .= t then{
	extra : "";
        RR : r;
	while _++"?"++R .= RR do{
	  if "yyLine"++_.=R then
            extra := extra++",yyLine=yyLine"
          else if "yyFile"++_.=R then
	    extra := extra++",yyFile=yyFile"
	  else if "yyPos"++_.=R then
	    extra := extra++",yyPos=yyPos"
	  else if "yyLPos"++_.=R then
	    extra := extra++",yyLPos=yyLPos";
	  RR := R;
	};
	valis extra;
      }
    };
    valis "";				-- no token type definition found
  };


} export (parseAfile,reverse,displayRE,findExtraTokenType);
