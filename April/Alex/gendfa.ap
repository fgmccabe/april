/*
 * Construct the first, last and followpos functions of an
 * augmented regular expression
 * Then construct the dfa from the resulting data
 */
#include "regexp.ah";

#op('**,right,800);


module
import {
    interface "genregexp.af"
  and
    interface <stdio.af>
}
in
{

/* We need a new version of the regexp type */  
rtree(%f) ::= tree(%f,logical,number[],number[]);

re(%f) ::= ordR(char,number) 
  | emptyR
  | orR(rtree(re(%f)),rtree(re(%f)))
  | catR(rtree(re(%f)),rtree(re(%f)))
  | starR(rtree(re(%f)))
  | charsR(char[],number)
  | finalR(rtree(re(%f)),finalType(%f),number);

  slt = {
    ([],P,pos) => (tree(emptyR,true,[],[]),P,pos)
  | ([C],P,pos) => (tree(ordR(C,P),false,[P],[P]),P+1,[([C],P),..pos])
  | ([C,..T],P,pos) => valof{
      L = tree(ordR(C,P),false,[P],[P]);
      (R::tree(_,_,_,last).=R,P1,pos1) = slt(T,P+1,[([C],P),..pos]);
      valis (tree(catR(L,R),false,[P],last),P1,pos1)
    }
  };

  /* Function to pick a set */
  L ** R => { if L==[] then R else L };

  /* Construct a labelled tree from a regular expression */
  mtree(Tr,P,S,pos) => { case Tr in {
    ordRE(ch) => (tree(ordR(ch,P),false,[P],[P]),P+1,[([ch],P),..pos])
  | emptyRE => (tree(emptyR,true,[],[]),P,pos)
  | charsRE(l) => (tree(charsR(l,P),false,[P],[P]),P+1,[(l,P),..pos])
  | negCharsRE(l) => (tree(charsR(S\l,P),false,[P],[P]),P+1,[(S\l,P),..pos])
  | periodRE => (tree(charsR(S\ [''\n,''\+ffff],P),false,[P],[P]),P+1,
		  [(S\ [''\n,''\+ffff],P),..pos])
  | seqRE(l) => slt(l,P,pos)
  | catRE(l,r) => valof{
      (L::tree(Lval,Ln,Lpre,Llast).=L,P1,pos1) = mtree(l,P,S,pos);
      (R::tree(Rval,Rn,Rpre,Rlast).=R,P2,pos2) = mtree(r,P1,S,pos1);
      FF = { if Ln then Lpre\/Rpre else Lpre};
      LL = { if Rn then Llast\/Rlast else Rlast};
      valis (tree(catR(L,R),Ln&&Rn,FF,LL),P2,pos2)
    }
  | orRE(l,r) => valof{
      (L::tree(Lval,Ln,Lpre,Llast).=L,P1,pos1) = mtree(l,P,S,pos);
      (R::tree(Rval,Rn,Rpre,Rlast).=R,P2,pos2) = mtree(r,P1,S,pos1);
      valis (tree(orR(L,R),Ln||Rn,Lpre\/Rpre,Llast\/Rlast),P2,pos2)
    }
  | starRE(l) => valof{
      (L::tree(Lval,Ln,Lpre,Llast).=L,P1,pos1) = mtree(l,P,S,pos);
      valis (tree(starR(L),true,Lpre,Llast),P1,pos1)
    }
  | plusRE(l) => mtree(catRE(l,starRE(l)),P,S,pos)

  | optRE(l) => mtree(orRE(l,emptyRE),P,S,pos)

  | finalRE(e,v) => valof{
      (L::tree(Lval,Ln,Lpre,Llast).=L,P1,pos1) = mtree(catRE(e,ordRE(''\+feff)),P,S,pos);
      EP = { if ([''\+feff],XX) in pos1 then XX else exception failed};
      valis (tree(finalR(L,v,EP),Ln,Lpre,Llast),P1,pos1)
    }
  }};    

  follow(tree(E,N,F,L),V)=>
  {
    case E in {
      catR(l::tree(Lval,Ln,Lpre,Llast).=l,r::tree(Rval,Rn,Rpre,Rlast).=r) => valof {
        V1 : follow(r,follow(l,V));

        for i in Llast do{
	  if (i,VV) in V1 then
	    V1 := (V1^\ (i,_))\/[(i,VV\/Rpre)]
          else
	    V1 := [(i,Rpre),..V1]
	};
        valis V1;
      }
    | starR(l::tree(Lval,Ln,Lpre,Llast).=l) => valof{
        V1 : follow(l,V);

        for i in Llast do{
	  if (i,VV) in V1 then
	    V1 := (V1^\ (i,_))\/[(i,VV\/Lpre)]
          else
	    V1 := [(i,Lpre),..V1];
	};
        valis V1;
      }
    | orR(l,r) => follow(r,follow(l,V))
    | finalR(e,_,_) => follow(e,V)
    | _ => V
    }
  };
    
  displayTree(tree(E,N,F,L),Off,O,Root)
  {
    W = 0-(Off+16);
    case E in {
      ordR(C,i) -> {
	F^0~W++" \""++string%%C++"\":"++i^0++" "++L^0++"\n">>O
      }
    | catR(l,r) -> {
        displayTree(l,Off+2,O,false);
        if Root then
         "Root : ">>O;
        F^0~W++" . "++L^0++"\n">>O;
        displayTree(r,Off+2,O,false);
      }
    | orR(l,r) -> {
        displayTree(l,Off+2,O,false);
        if Root then
         "Root : ">>O;
        F^0~W++" | "++L^0++"\n">>O;
        displayTree(r,Off+2,O,false);
      }
    | starR(l) -> {
        displayTree(l,Off+2,O,false);
        if Root then
         "Root : ">>O;
        F^0~W++" * "++L^0++"\n">>O;
      }
    | finalR(e,f,P) -> {
        displayTree(e,Off+2,O,false);
        if Root then
         "Root : ">>O;
        F^0~W++" => ("++P^0++")"++f^0++L^0++"\n">>O;
      }
    | charsR(l,P) -> {
        if Root then
         "Root : ">>O;
	F^0~W++" ["++string%%reverse(l)++"]:"++P^0++" "++L^0++"\n">>O
      }
    | emptyR -> {}
    | OO -> {
        if Root then
         "Root : ">>O;
        "Funny tree "++OO^0++"\n">>O
      }
    };
  };

  reverse(L) => valof {
    R : [];
    LL : L;
    while [X,..Y].=LL do {
      R := [X,..R];
      LL := Y;
    };
    valis R;
  };

  mergeREStates = {
    [] => []
  | [(State,RE),..REs] => valof{
      (R,S) = getREs(State,REs,RE,[]);
      valis [(State,R),..mergeREStates(S)]
    }
  };

  getREs = {
    (_,[],RE,S) => (RE,S)
  | (State,[(State,RE),..REs],R,S) => getREs(State,REs,orRE(R,RE),S)
  | (State,[St,..REs],R,S) => getREs(State,REs,R,[St,..S])
  };

  genD(SName,Tree,init,sigma,follow,pos) => valof{
    tree(root,N,F,L) = Tree;
    Sno : init;
    finals : pickFinal(Tree,pos,F,Sno);
    states : [(Sno,F,SName)];
    trans : [];
    Mark : Sno;

    while Mark<=Sno && (Mark,T,_) in states do{
      tt : [];

      for a in sigma do {
	U = setof {
	  for (p :: (C,p) in pos && a in C) in T do {
	    if (p,FF) in follow then{
	      for u in FF do
	      elemis u;
	    }
	  }
	};

	if U!=[] then{
	  if (Nx,U,_) in states then 
	    tt := [dfa(a,Nx),..tt]
	  else{
	    Sno := Sno+1;
	    tt := [dfa(a,Sno),..tt];

	    finals := pickFinal(Tree,pos,U,Sno)\/finals;
	    states := [(Sno,U,""),..states];
          }
        };
      };
      trans := [(Mark,tt),..trans];
      Mark := Mark+1;
    };
    
    valis (trans,states,finals,Sno);
  };


  pickFinal(Tree,pos,U,Sno) => valof {
    FF : [];

    for (p :: ([''\+feff],p) in pos ) in U do {
      Final = pick(Tree,p,Sno);
      FF := FF**Final;
    };
    valis FF
  };

  pick(tree(E,_,_,_),p,Sno) => {
    case E in {
      catR(l,r) => pick(l,p,Sno)**pick(r,p,Sno)
    | orR(l,r) => pick(l,p,Sno)**pick(r,p,Sno)
    | starR(l) => pick(l,p,Sno)
    | finalR(e,f,!p) => [(Sno,[f])]
    | _ => []
    }
  };

  switchify = {
    ([],_) => []
  | ([(p,[state(S)]),..F],St) :: (P,_,S) in St => 
      [(p,[switch(S,P)]),..switchify(F,St)]
  | ([Fin,..Al],St) => [Fin,..switchify(Al,St)]
  };

  showTrans(Tr){
    for (Sno,T) in Tr do{
      "State "++Sno^0++":\n">>stdout;
      for dfa(C,N) in T do
        "\t"++C^0++" -> "++N^0++"\n">>stdout
    }
  };

  genDfa(Rs,sigma) => valof{
    REs = mergeREStates(Rs);
    P : 1;
    Sno : 0;
    States : [];
    Finals : [];
    Trans : [];

    for (SName,RE) in REs do{
      (T,P1,pos) = mtree(RE,P,sigma,[]);

      P := P1;

      (Tr,St,Fn,Sno1) = genD(SName,T,Sno,sigma,follow(T,[]),pos);
      Sno := Sno1+1;

      States := St\/States;
      Finals := Fn\/Finals;
      Trans := Tr\/Trans;
    };

    Finals := switchify(Finals,States);

    valis collect{
      for ((S,_,_):: (S,T) in Trans) in States do
        elemis (S,setof{
	  for a in sigma do
	    if dfa(a,Nx) in T then
	      elemis dfa(a,Nx);
          },{ if (S,Final) in Finals then Final else []})
    };
  };

  showDfaStates(S){
    for (St,D,F) in S do{
      "\nState: "<>St^0>>stdout;
      for dfa(C,Nx) in D do{
	"\n   "<>C^0<>" -> "<>Nx^0>>stdout;
      };
      for Fn in F do{
	"\nFinal: "<>Fn^0>>stdout;
      };
    };
    "\n">>stdout;
    fflush(stdout);
  };

} export (genDfa,showDfaStates)
