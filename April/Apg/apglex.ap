/* Automatically generated lexer from "apglex.alx" by Alex*/
/*
 * Lexical rules for the apg parser
 */

#include "lextok.ah";

module
{
failedMatch(yyTok,yyPos,yyLPos,yyLine, _, _, _, _)=>
    exception error("lexing failed at line "++yyLine^0++"/"++yyPos^0,
                    'failed);
yyNextToken(input,ipos,iline,yyFile) => valof {
  yyState : 0; yyString : input; 
  yyPos:ipos; yyIPos:ipos; yyLPos:ipos; yyLine:iline; yyLLine:iline;
  yyNext : -1; yyFinal : failedMatch; 
  yyRest : input; yyLast : []; yyTk : [];
  while true do {
    case yyState in {
      -1 -> {
              if yyNext!= -1 then {
                yyState := yyNext; yyTk := [];
                yyIPos := yyLPos; yyLine := yyLLine;
                yyNext := -1; yyString := yyRest;
              }
              else {
                env = {
                  S : yyRest;
                  getBuf() => S;
                  setBuf(newS) { S := newS; };
                  getCh() => valof {
                    if S == [] then
                       valis ''\+ffff
                    else {
                       [C,..R] = S;
                       S := R;
                       valis C;
                    }
                  };
                  putCh(C) {
                    S : [C,..S];
                  };
                };
                tok = yyFinal(yyRev(yyLast),yyIPos,yyLPos,yyLLine,env.getCh,env.putCh,env.getBuf,env.setBuf);                valis ((env.getBuf(),yyLPos,yyLLine,yyFile),tok)
		   }
            }
    | 63 -> {
	yyState := 0;		-- restart in initial state
	yyTk := []; yyIPos := yyPos;
      }
    | 62 -> {
	try {
	  yyNext := 60;		-- go to comment state
	  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine;
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(0,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 61 -> {
	yyState := 60;		-- restart in comment state
	yyTk := []; yyIPos := yyPos;
      }
    | 60 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(1,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 59 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ NONASSOC },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 58 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(2,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 57 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(3,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 56 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ EXPECT },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 55 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ TOKEN },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 54 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ START },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 53 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ RIGHT },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 52 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(4,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 51 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(5,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 50 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ TYPE },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 49 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(6,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 48 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(7,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 47 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(8,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 46 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ PREC },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 45 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(9,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 44 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ LEFT },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 43 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(10,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 42 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ CENTBRACE(trim(yyTok,2)) },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 41 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(11,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 40 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(12,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 39 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(13,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 38 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(14,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 37 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(15,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 36 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(16,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 35 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(17,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 34 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(18,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 33 -> {
	yyState := 0;		-- restart in initial state
	yyTk := []; yyIPos := yyPos;
      }
    | 32 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(19,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 31 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(20,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 30 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(21,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 29 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(22,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 28 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(23,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 27 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(24,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 26 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(25,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 25 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(26,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 24 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(27,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 23 -> {
	yyState := 60;		-- restart in comment state
	yyTk := []; yyIPos := yyPos;
      }
    | 22 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ BRACE(trim(yyTok,1)) },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 21 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(28,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 20 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(29,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 19 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ MARK },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 18 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(30,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 17 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(31,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 16 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(32,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 15 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(33,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 14 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(34,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 13 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(35,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 12 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(36,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 11 -> {
	try {
	  yyNext := 0;		-- go to initial state
	  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine;
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(37,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 10 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ BAR },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 9 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(38,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 8 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ COLON },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 7 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ SEMI },yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 6 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(39,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 5 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(40,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 4 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(41,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 3 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ NUM(number%%(string%%yyTok)) },yyFile=yyFile,yyLine=yyLine)}};
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(42,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 2 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok={ ID(yyTok) },yyFile=yyFile,yyLine=yyLine)}};
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(43,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 1 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyRest := yyString; yyLLine := yyLine; yyNext := -1;  yyFinal := {(yyTok,yyPos,yyLPos,yyLine,yyInput,yyUnput,yyGetRest,yySetRest)=>{(yyTok=EOF,yyFile=yyFile,yyLine=yyLine)}};
        yyState := -1
      }
    | 0 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans(44,yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    }
  }
};
yyChInRange(X, From, To) => X != ''\+ffff && From <= X && X <= To;
yyTrans = {
  (44,yyChar) => (case yyChar in {
	    ''\b => 11
	|   ''\t => 11
	|   ''\n => 11
	|   ''\r => 11
	|   ''  => 11
	|   ''% => 4
	|   ''- => 5
	|   ''/ => 9
	|   X::yyChInRange(X,''0,''9) => 3
	|   '': => 8
	|   ''; => 7
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''z) => 2
	|   ''{ => 6
	|   ''| => 10
	|   ''\+ffff => 1
	})
| (43,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''z) => 2
	})
| (42,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''0,''9) => 3
	})
| (41,yyChar) => (case yyChar in {
	    ''% => 19
	|   ''e => 12
	|   ''l => 13
	|   ''n => 14
	|   ''p => 15
	|   ''r => 16
	|   ''s => 17
	|   ''t => 18
	|   ''{ => 20
	})
| (40,yyChar) => (case yyChar in {
	    ''- => 21
	|   X::yyChInRange(X,''0,''9) => 3
	})
| (39,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''\a,''\r) => 6
	|   ''\e => 6
	|   X::yyChInRange(X,'' ,''|) => 6
	|   ''~ => 6
	|   ''\d => 6
	|   ''} => 22
	})
| (38,yyChar) => (case yyChar in {
	    ''* => 23
	})
| (37,yyChar) => (case yyChar in {
	    ''\b => 11
	|   ''\t => 11
	|   ''\n => 11
	|   ''\r => 11
	|   ''  => 11
	})
| (36,yyChar) => (case yyChar in {
	    ''x => 24
	})
| (35,yyChar) => (case yyChar in {
	    ''e => 25
	})
| (34,yyChar) => (case yyChar in {
	    ''o => 26
	})
| (33,yyChar) => (case yyChar in {
	    ''r => 27
	})
| (32,yyChar) => (case yyChar in {
	    ''i => 28
	})
| (31,yyChar) => (case yyChar in {
	    ''t => 29
	})
| (30,yyChar) => (case yyChar in {
	    ''o => 30
	|   ''y => 31
	})
| (29,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''\a,''\r) => 20
	|   ''\e => 20
	|   X::yyChInRange(X,'' ,''$) => 20
	|   X::yyChInRange(X,''&,''\d) => 20
	|   ''% => 32
	})
| (28,yyChar) => (case yyChar in {
	    ''\a => 21
	|   ''\b => 21
	|   ''\t => 21
	|   ''\v => 21
	|   ''\f => 21
	|   ''\r => 21
	|   ''\e => 21
	|   X::yyChInRange(X,'' ,''\d) => 21
	|   ''\n => 33
	})
| (27,yyChar) => (case yyChar in {
	    ''p => 34
	})
| (26,yyChar) => (case yyChar in {
	    ''f => 35
	})
| (25,yyChar) => (case yyChar in {
	    ''n => 36
	})
| (24,yyChar) => (case yyChar in {
	    ''e => 37
	})
| (23,yyChar) => (case yyChar in {
	    ''g => 38
	})
| (22,yyChar) => (case yyChar in {
	    ''a => 39
	})
| (21,yyChar) => (case yyChar in {
	    ''k => 40
	})
| (20,yyChar) => (case yyChar in {
	    ''p => 41
	})
| (19,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''\a,''\r) => 20
	|   ''\e => 20
	|   X::yyChInRange(X,'' ,''|) => 20
	|   ''~ => 20
	|   ''\d => 20
	|   ''} => 42
	})
| (18,yyChar) => (case yyChar in {
	    ''e => 43
	})
| (17,yyChar) => (case yyChar in {
	    ''t => 44
	})
| (16,yyChar) => (case yyChar in {
	    ''a => 45
	})
| (15,yyChar) => (case yyChar in {
	    ''c => 46
	})
| (14,yyChar) => (case yyChar in {
	    ''h => 47
	})
| (13,yyChar) => (case yyChar in {
	    ''r => 48
	})
| (12,yyChar) => (case yyChar in {
	    ''e => 49
	})
| (11,yyChar) => (case yyChar in {
	    ''e => 50
	})
| (10,yyChar) => (case yyChar in {
	    ''c => 51
	})
| (9,yyChar) => (case yyChar in {
	    ''s => 52
	})
| (8,yyChar) => (case yyChar in {
	    ''t => 53
	})
| (7,yyChar) => (case yyChar in {
	    ''t => 54
	})
| (6,yyChar) => (case yyChar in {
	    ''n => 55
	})
| (5,yyChar) => (case yyChar in {
	    ''t => 56
	})
| (4,yyChar) => (case yyChar in {
	    ''s => 57
	})
| (3,yyChar) => (case yyChar in {
	    ''o => 58
	})
| (2,yyChar) => (case yyChar in {
	    ''c => 59
	})
| (1,yyChar) => (case yyChar in {
	    X::yyChInRange(X,''\a,''\r) => 61
	|   ''\e => 61
	|   X::yyChInRange(X,'' ,'')) => 61
	|   X::yyChInRange(X,''+,''\d) => 61
	|   ''* => 62
	})
| (0,yyChar) => (case yyChar in {
	    ''/ => 63
	})
};

yyRev(L) => valof {  -- non-recursive reverse
  R : []; LL : L;
  while [E,..EE].=LL do {
    R := [E,..R];
    LL := EE;
  };
  valis R
};

trim(S,C) =>
  front(tail(S,C),listlen(S)-C*2);
} export yyNextToken;
