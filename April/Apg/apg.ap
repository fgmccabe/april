/*
 * Program to parse apg files
 */
#include "lextok.ah";

program
import{
  interface "streamer.af" and
  interface "gensets.af" and
  interface "lr0.af" and
  interface "lalr.af" and
  interface "genparser.af" and
  interface "rules.af" and
  interface "genrules.af"
}
in{
  showLits = {
    [] => ""
  | [L,..R] => string%%L ++ " " ++ showLits(R)
  };

  showRule(rule(R,L,A,B,Act,(Assoc,Pre))) => 
    R^0++": "++string%%L++" -> "++
    showLits(A)++
    { if B!=[] then 
        " . "++showLits(B)
      else
        ""
    }++{
      if Pre!=0 || Assoc != nonA then
        "("++string%%Assoc++"/"++Pre^0++")"
      else
        ""
    };

  suffixName(Nm,S) => {
    if _++"."++string .= Nm then Nm  else Nm++S
  };


  main()
  {
    startTime = ticks();
    args : tail(command_line(),1);	-- pick up the arguments
    trace : false;
    verbose : false;
    lexer : "lex.aam";
    file : "";
    while ["+"++option,..A].=args do{
      args := A;
      case option in {
        "v"++string -> verbose := true
      | "t"++string -> trace := true
      | "l" -> { lexer := suffixName(head(args),".aam");args:=tail(args,1); }
      | "l"++lex -> lexer := lex
      | _ -> "Unknown option "++option++"\n">>stderr
      };
    };
    if args!=[] then
      file := head(args)
    else{
      "Usage: apg [+v] [+t] [+llexer] file\n">>stderr;
      fflush(stderr);
      halt;
    };

    inFn = suffixName(file,".apg");

    out = valof {
      if H++".apg" .= file then
        valis fopen(H++".ap",_create_write)
      else
        valis fopen(file++".ap",_create_write)
    };

    (preamble,data,postamble) .= grabData(inFn);

    input = preamble<>[''%,''%,..data]<>[''%,''%];

    (nonterms,terms,precs,tokdata,ttype,tokptn,semtype,pretext,start,rules) = 
      genrules(parser(input,1,1,file),inFn,trace);

    "rules parsed ("++(ticks()-startTime)^0++")\n">>stdout;

    terminals = ['$,'#,..terms];

    N = nullable(nonterms,rules);

    F = first(terminals,nonterms,rules,N);

    (T,G).=lr0states(rules,start);

    "lr0 states computed ("++(ticks()-startTime)^0++")\n">>stdout;

    XX = lookAheadK(T,G,rules,F,N);

    "lookahead computed("++(ticks()-startTime)^0++")\n">>stdout;

    A = actions(XX,G,nonterms,['error,..terminals],precs,rules,F,N);

    "actions computed("++(ticks()-startTime)^0++")\n">>stdout;

    if verbose then{
      listing = valof {
	if H++".apg" .= file then
          valis fopen(H++".output",_create_write)
	else
          valis fopen(file++".output",_create_write)
      };

      "Report for file "++inFn++"\n">>listing;
      "Rules found in the source\n">>listing;

      for Rule in rules do
        showRule(Rule)++"\n">>listing;

      "\nStart symbol is "++start^0++"\n">>listing;
      "\nTerminals are :">>listing;
      for Sy in terms do
        string%%Sy++" ">>listing;
      "\nNon terminals are ">>listing;
      for Sy in nonterms do
        string%%Sy++" ">>listing;
      "\nToken type is "++ttype>>listing;
      "\n\n">>listing;

      displayStates(XX,G,A,nonterms,listing);
      fclose(listing);
    };

    genParser(trace,pretext++ttype++semtype,string%%postamble,lexer,inFn,
      A,G,[rule(0,'?,[start],[],[],(nonA,0)),..rules],terminals,nonterms,
      tokdata,tokptn)
    ++"\n">>out;
    fclose(out);
    
    "parser generated("++(ticks()-startTime)^0++")\n">>stdout;

    hdr = valof {
      if H++".apg" .= file then
        valis fopen(H++"_tok.ah",_create_write)
      else
        valis fopen(file++"_tok.ah",_create_write)
    };

    "/* Token type definition for \""++inFn++"\" grammar */\n"
    "/* DO NOT EDIT -- automatically generated by apg */\n\n">>hdr;

    ttype ++"\n" >>hdr;
    semtype ++"\n">>hdr;
    fclose(hdr);
  }
} execute main;

