@node Introduction
@chapter Introduction

@noindent
@code{Apg} is a parser generator system written in @code{April} for
@code{April} programs. By providing a rule file -- which has a similar
format to other favorites such as @code{yacc} and @code{bison} -- you
can generate an efficient LALR(1) parser for use in compilers, parsers
for special languages such as XML, or even for parsing input data.

@code{Apg} converts a set of grammar rules -- expressed using a rule
notation -- into a program that applies those rules on an input stream
and returns `parse structures'.

@code{Apg} is intended to be used with @code{Alex} -- which is also part
of the standard @code{April} distribution. This is reflected in two
ways: the @code{Apg} parser `knows' how to call the tokenizer generated
by @code{Alex} and the @code{apg} program can be used to construct a
special header file for inclusion in the lexical parser generated by
@code{Alex}.

This manual serves two purposes: it serves as an introduction to the use
of @code{Apg}, in particular in combination with @code{Alex} and
@code{April}; and it gives a complete definition of the particular
services and functions offered by @code{Apg}. It is not intended as an
in-depth introduction to the theory behind LALR(1) grammars; for that we
refer the reader to @cite{Compilers: Principles, Techniques and Tools,
Aho, Sethi and Ullman}.



