/* Automatically generated lexer from "ulex.alx" by Alex*/
/*
 * Lexical rules for the UL parser
 */

#include "ul_tok.ah";

module
{
failedMatch(yyTok,yyPos,yyLPos,yyLine)=>
    exception error("lexing failed at line "++yyLine^0++"/"++yyPos^0,
                    'failed);
yyStream ::= (char[],number,number,string);

yyNextToken((input,ipos,iline,yyFile)) => valof {
  yyState : 0; yyString : input; 
  yyPos:ipos; yyIPos:ipos; yyLPos:ipos; yyLine:iline; yyLLine:iline;
  yyNext : -1; yyFinal : failedMatch; 
  yyRest : input; yyLast : []; yyTk : [];
  while true do {
    case yyState in {
      -1 -> {
              if yyNext!= -1 then {
                yyState := yyNext; yyTk := [];
                yyIPos := yyLPos; yyLine := yyLLine;
                yyNext := -1; yyString := yyRest;
              }
              else {
                env = {
                  S : yyRest;
                  getBuf() => S;
                  setBuf(newS) { S := newS; };
                  getCh() => valof {
                    if S == [] then
                       valis ''\+ffff
                    else {
                       [C,..R] = S;
                       S := R;
                       valis C;
                    }
                  };
                  putCh(C) {
                    S : [C,..S];
                  };
                };
                tok = yyFinal(yyRev(yyLast),yyIPos,yyLPos,yyLine);                valis ((yyRest,yyLPos,yyLLine,yyFile),tok)
		   }
            }
    | 28 -> {
	yyState := 0;		-- restart in initial state
	yyTk := []; yyIPos := yyPos;
      }
    | 27 -> {
	try {
	  yyNext := 25;		-- go to comment state
	  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine;
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans0(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 26 -> {
	yyState := 25;		-- restart in comment state
	yyTk := []; yyIPos := yyPos;
      }
    | 25 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans1(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 24 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ PRINT })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans2(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 23 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ ID(yyTok) })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans3(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 22 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ HALT })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans2(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 21 -> {
	yyState := 0;		-- restart in initial state
	yyTk := []; yyIPos := yyPos;
      }
    | 20 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ ID(yyTok) })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans4(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 19 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ ID(yyTok) })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans5(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 18 -> {
	yyState := 25;		-- restart in comment state
	yyTk := []; yyIPos := yyPos;
      }
    | 17 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans6(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 16 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ ID(yyTok) })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans7(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 15 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ ID(yyTok) })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans8(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 14 -> {
	try {
	  yyNext := 0;		-- go to initial state
	  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine;
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans9(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 13 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ SLASH })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans10(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 12 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ SEMI })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;        yyState := -1
      }
    | 11 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ PLUS })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;        yyState := -1
      }
    | 10 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ EQUAL })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;        yyState := -1
      }
    | 9 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ MINUS })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans11(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 8 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ RPAR })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;        yyState := -1
      }
    | 7 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ LPAR })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;        yyState := -1
      }
    | 6 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ STAR })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;        yyState := -1
      }
    | 5 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ NUM(number%%(string%%yyTok)) })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans12(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 4 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ ID(yyTok) })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans13(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 3 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ ID(yyTok) })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans14(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 2 -> {
	try {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok={ ID(yyTok) })}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans2(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    | 1 -> {
	  yyLast := yyTk; yyLPos := yyPos;  yyFinal := {(yyTok,yyPos,yyLPos,_)=>{(yyTok=EOF)}};
  yyRest := yyString; yyLPos := yyPos; yyLLine := yyLine; yyNext := -1;        yyState := -1
      }
    | 0 -> {
	try {
	  [yyChar,..yyStr] .= { if yyString==[] then [''\+ffff] else yyString};
	  yyString := yyStr;
	  yyLLine := yyLine;   -- keep in case we have to reset
	  if yyChar == ''\n then { yyLine := yyLine+1; yyPos :=0};
	  yyState := yyTrans15(yyChar);
	  yyPos +:= 1; yyTk := [yyChar,..yyTk]
	}
	onerror
	 _ -> yyState := -1
      }
    }
  }
};
yyChInRange(X, From, To) => X != ''\+ffff && From <= X && X <= To;
  yyTrans15(yyChar) => case yyChar in {
    ''\b => 14
	|   ''\t => 14
	|   ''\n => 14
	|   ''\r => 14
	|   ''  => 14
	|   ''( => 7
	|   '') => 8
	|   ''* => 6
	|   ''+ => 11
	|   ''- => 9
	|   ''/ => 13
	|   X::yyChInRange(X,''0,''9) => 5
	|   ''; => 12
	|   ''= => 10
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''g) => 2
	|   X::yyChInRange(X,''i,''o) => 2
	|   X::yyChInRange(X,''q,''z) => 2
	|   ''h => 3
	|   ''p => 4
	|   ''\+ffff => 1
  };
  yyTrans14(yyChar) => case yyChar in {
    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''b,''z) => 2
	|   ''a => 15
  };
  yyTrans13(yyChar) => case yyChar in {
    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''q) => 2
	|   X::yyChInRange(X,''s,''z) => 2
	|   ''r => 16
  };
  yyTrans12(yyChar) => case yyChar in {
    X::yyChInRange(X,''0,''9) => 5
  };
  yyTrans11(yyChar) => case yyChar in {
    ''- => 17
	|   X::yyChInRange(X,''0,''9) => 5
  };
  yyTrans10(yyChar) => case yyChar in {
    ''* => 18
  };
  yyTrans9(yyChar) => case yyChar in {
    ''\b => 14
	|   ''\t => 14
	|   ''\n => 14
	|   ''\r => 14
	|   ''  => 14
  };
  yyTrans8(yyChar) => case yyChar in {
    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''k) => 2
	|   X::yyChInRange(X,''m,''z) => 2
	|   ''l => 19
  };
  yyTrans7(yyChar) => case yyChar in {
    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''h) => 2
	|   X::yyChInRange(X,''j,''z) => 2
	|   ''i => 20
  };
  yyTrans6(yyChar) => case yyChar in {
    ''\a => 17
	|   ''\b => 17
	|   ''\t => 17
	|   ''\v => 17
	|   ''\f => 17
	|   ''\r => 17
	|   ''\e => 17
	|   X::yyChInRange(X,'' ,''\d) => 17
	|   ''\n => 21
  };
  yyTrans5(yyChar) => case yyChar in {
    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''s) => 2
	|   X::yyChInRange(X,''u,''z) => 2
	|   ''t => 22
  };
  yyTrans4(yyChar) => case yyChar in {
    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''m) => 2
	|   X::yyChInRange(X,''o,''z) => 2
	|   ''n => 23
  };
  yyTrans3(yyChar) => case yyChar in {
    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''s) => 2
	|   X::yyChInRange(X,''u,''z) => 2
	|   ''t => 24
  };
  yyTrans2(yyChar) => case yyChar in {
    X::yyChInRange(X,''0,''9) => 2
	|   X::yyChInRange(X,''A,''Z) => 2
	|   ''_ => 2
	|   X::yyChInRange(X,''a,''z) => 2
  };
  yyTrans1(yyChar) => case yyChar in {
    X::yyChInRange(X,''\a,''\r) => 26
	|   ''\e => 26
	|   X::yyChInRange(X,'' ,'')) => 26
	|   X::yyChInRange(X,''+,''\d) => 26
	|   ''* => 27
  };
  yyTrans0(yyChar) => case yyChar in {
    ''/ => 28
  };

yyRev(L) => valof {  -- non-recursive reverse
  R : []; LL : L;
  while [E,..EE].=LL do {
    R := [E,..R];
    LL := EE;
  };
  valis R
};

} export yyNextToken;
