instruction ::= halt()
  | movl(%a,number)
  | move(number,number)
  | emove(number,number)
  | stoe(number)
  | loade(number)
  | jmp(symbol)
  | ijmp(number,symbol)
  | hjmp(number,symbol)
  | tjmp(number,symbol)
  | escape(number,number,symbol)
  | call(number,number,number)
  | ecall(number,number,number)
  | fcall(number,number,number)
  | fecall(number,number,number)
  | ret()
  | result(number,number)
  | allocv(number)
  | gcmap(number)
  | gclmap(symbol)
  | gc(number,number)
  | initv(number)
  | mstring(number,string)
  | mfloat(number,number)
  | mnil(number,symbol)
  | mlit(number,%b)
  | mcons(number,number,number)
  | mtpl(number,number)
  | mhdl(number,handle)
  | anynum(number,symbol)
  | anyint(number,symbol)
  | anyflt(number,symbol)
  | anysym(number,symbol)
  | anystr(number,symbol)
  | anyhdl(number,symbol)
  | anytpl(number,symbol)
  | anylist(number,symbol)
  | anyval(number,symbol)
  | anyvar(number,symbol)
  | many(number,any)
  | xsig(number,number,number)
  | msig(number,string)
  | cpystr(number,number,number)
  | substr(number,number,number)
  | lxstr(number,number,number)
  | cxstr(number,number,number)
  | mstr(number,number,number)
  | pstr(number,number,number)
  | estr(number,symbol)
  | rval(number,number,number)
  | strinc(number,symbol)
  | stepr(number,symbol)
  | cat(number,number,number)
  | loc2tpl(number,number,number)
  | indxfld(number,number,number)
  | tpupdte(number,number,number)
  | untpl(number,number,number)
  | unpack(number,symbol)
  | pckargs()
  | cons(number,number,number)
  | ucons(number,number,number)
  | nthel(number,number,number)
  | add2lst(number,number,number)
  | nvar(number,number)
  | bndvr(number,number)
  | drfvr(number,number)
  | mvar(number,number)
  | errblk(number,symbol)
  | errend(number)
  | generr(number)
  | moverr(number)
  | plus(number,number,number)
  | minus(number,number,number)
  | times(number,number,number)
  | divide(number,number,number)
  | incr(number,number,number)
  | eq(number,number)
  | ne(number,number)
  | gt(number,number)
  | le(number,number)
  | eqq(number,number)
  | neqq(number,number)
  | feq(number,number)
  | fne(number,number)
  | fgt(number,number)
  | fle(number,number)
  | ieq(number,number)
  | ine(number,number)
  | igt(number,number)
  | ile(number,number)
  | iftrue(number,symbol)
  | iffalse(number,symbol)
  | self(number)
  | die()
  | use(number,number)
  | dline(number,string,number)
  | dentry(number,string)
  | dexit(number,string)
  | dassign(number,string,number)
  | dreturn(number,string,number)
  | daccept(number,string,number)
  | ddie(number)
  | dsend(number,number,number)
  | dfork(number,number,number)
  | dwait(number)
  | dscope(number,number)
  | dsuspend(number)
  | noop();

program
 import native 
   ({(string,(symbol,instruction[])[])=>any}?assem) from <libapasm.so> in
{
  main(N,M)
  {
    _break("");
    L = 1..N;
    "Length of "++L^0++" is "++listlen(L)^0++"\n">>stdout;
  }
} execute main;
