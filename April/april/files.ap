/*
 * File manager module for April run-time system
 */
#include "files.ah";

/* Special local macros to support modules without interference wrt i/o */

module 
{		/* We dont want definitions of stdio here */
  /* A file reader process - must be invoked after file is attached */
  reader(F){
    repeat {
      Msg ->> {{ 
         case Msg in {
           _char_  -> 		/* Read a single character */
	     __inchars(F,1) >> replyto

         | _ascii_  -> 		/* Read a byte as an ASCII integer */
             __inascii(F) >> replyto

         | _line_  ->  		/* Read a line */
             __inline(F) >> replyto

         | _all_  ->  		/* Read available text */
             __intext(F) >> replyto

         | _bline_  ->		/* Read a balanced line */
             __binline(F) >> replyto

         | _read_  ->		/* Read a data term */
             __read(F) >> replyto

         | _decode_  ->  	/* Read encoded data */
             __decode(F) >> replyto

         | _eof_  -> 		/* End of file test */
             __eof(F) >> replyto

         | _ready_  ->		/* File ready test */
             __ready(F) >> replyto

         | _ftell_  ->		/* current file position */
             __tell(F) >> replyto

         | _bytes_(k)  -> 	/* Read a block of bytes */
             __inbytes(F,k) >> replyto

         | _chars_(k)  -> 	/* Read a block string */
             __inchars(F,k) >> replyto

         | _lines_(count)  -> { /* Read a number of lines */
             cnt : count;
             list = collect{
	       while !__eof(F) && cnt>0 do{
	         elemis __inline(F);
	         cnt := cnt-1;
               }
             };

             ('_lines, list, count-cnt) >> replyto;
           }

         | other  -> 
             error("permission denied",'privileged) >> replyto
         }}
         onerror
           Error -> Error >> replyto  /* report an error */
       }
    } until _close_ ;

    __close(F);			/* close the file */
  };

  i_streamer(F,Cl,FF){
    no : 0;
    while ! __eof(F) do{
      no +:=1;
      FF(no,F) >> Cl;
    };
    __close(F);
    sio_end >> Cl;
  };

  char_in(no,F) => sio_char(no,__inchar(F));

  line_in(no,F) => sio_text(no,__inline(F));

  text_in(no,F) => sio_text(no,__intext(F));

  term_in(no,F) => sio_term(no,__read(F));

  coded_in(no,F) => sio_term(no,__decode(F));

  in_streamer(F,Cl,mode) => valof{
    FF = { case mode in {
      char_stream => char_in
    | line_stream => line_in
    | text_stream => text_in
    | term_stream => term_in
    | coded_stream => coded_in
    }};
    valis spawn{
      no : 0;
      while ! __eof(F) do{
        no +:=1;
        FF(no,F) >> Cl;
      };
      __close(F);
      sio_end >> Cl;
    };
  };

  o_c_streamer(F){
    repeat{
      sio_char(_,Ch) ->> { __outch(F,Ch); __flush(F) }
    } until sio_end;
    __close(F);
  };

  o_t_streamer(F){
    repeat{
      sio_text(_,Txt) ->> { __outchar(F,Txt); __flush(F) }
    } until sio_end;
    __close(F);
  };

  o_cd_streamer(F){
    repeat{
      sio_term(_,Txt) ->> { __encode(F,Txt); __flush(F) }
    } until sio_end;
    __close(F);
  };

  out_streamer(F,mode) => valof{
    PP = { case mode in {
      char_stream => o_c_streamer
    | line_stream => o_t_streamer
    | text_stream => o_t_streamer
    | coded_stream => o_cd_streamer
    | _ => exception error("invalid output stream mode",'inval)
    }};

    valis spawn PP(F)
  };

  /* A file writer process */
  writer(F){
    repeat {
      string?txt  ->> {	/* Write a string to a file */
        __outchar(F,txt)		-- dont bother replytoing normally
        onerror
        { Error -> Error >> replyto} /* report an error */
      }

    | Msg ->> {{ case Msg in {
        _outchar_(txt) -> {		-- Write a string to a file 
          __outchar(F,txt); 
          'write_ok >> replyto 
        }

      | _encode_(data)  -> {		-- Write a encoded value
	  __encode(F,data); 
          'write_ok >> replyto
        }

      | _outbytes_(txt) -> {		-- Write a list of bytes to a file 
          __outbytes(F,txt); 
          'write_ok >> replyto 
        }

      | _flush_ ->{ 			-- flush the output buffer
          __flush(F);
	 '_flush_ok >> replyto
       }

      | _ready_ -> 			-- File ready test
          __ready(F) >> replyto

      | _ftell_ ->			-- determine current file position
	  __tell(F) >> replyto

      | other ->
	  error("permission denied",'privileged) >> replyto
      }}
      onerror 
        Error -> Error >> replyto	-- report an error
      }
    } until _close_ ;

    __close(F);
  };

  reader_writer(F,rr){			/* Handle both input and output */
    repeat {
      ('_outchar_,txt)  ->> { /* Write a string to a file */
        { __outchar(F,txt); 'write_ok >> replyto }
        onerror
        { Error -> Error >> replyto } /* report an error */
      }

    | string?txt ->> {	/* Write a string to a file */
        __outchar(F,txt)		-- dont bother replytoing normally
        onerror
          Error -> {} 
      }

    | _outbytes_(txt) ->> {		-- Write a list of bytes to a file 
          __outbytes(F,txt); 
          'write_ok >> replyto 
        }

    | _encode_(data)  ->> {	/* Write a encoded value */
	{ __encode(F,data); 'write_ok >> replyto }
	onerror
        { Error -> Error >> replyto } /* report an error */
      }

    | _flush_ ->> {			/* flush the output buffer */
        __flush(F) onerror { X -> {} };
	 '_flush_ok >> replyto
       }

    | _ftell_ ->> {			/* determine current file position */
	{ __tell(F) >> replyto }
	onerror
        { Error -> Error >> replyto } /* report an error */
      }

/*
    | _seek_(pos,mode)  ->> {
 	{ __seek(F,pos,mode); 'seek_ok >> replyto }
	onerror
        { Error -> Error >> replyto } -- report an error
      }
*/

    | other ->> {
        who = replyto;
	other >> rr;			/* We wait for the replyto */
        receive{
          any?reply :: replyto == rr ->> { reply >> who }
        }
      }

    } until _close_;

    kill(rr);
    __close(F);
  };


  /* Establish a server on a port,
     Main argument is a procedure to execute for each new connection */
  _server(port, P, client,FM)
  {
    try {			/* a lot of things can fail here */
       L = _listen(port);
      _new_server_(self())~~[replyTo(creator())] >> client;

      while true do {
        (fIn,fOut) = _accept(L);

	try {
	  (hostName,clPort) = _peerip(fIn);

	  inP = spawn{ try {
            reader(fIn);
          } onerror
            Error -> Error >> client
          };

          outP = spawn { try {
            writer(fOut);
          } onerror 
            Error -> Error~~[replyTo(creator())]>>client
          };

          new_connection(
	    __fork_(nullhandle,client,FM,_mailer(),true,
		    {()->{
			P(hostName,clPort,inP,outP);
			_close_ >> inP; _close_>>outP
		      }})) >> client
        } onerror
          Error -> Error~~[replyTo(creator())]>>client
      }
    } onerror 
        error(C, X) -> 
          error(C,X)~~[replyTo(creator())] >> client
  };

    /* Streaming server */
  _s_server(port,P,client,style,FM)
  {
    try {			/* a lot of things can fail here */
       L = _listen(port);
      _new_server_(self())~~[replyTo(creator())] >> client;

      while true do {
        (fIn,fOut) = _accept(L);

	try {
	  (hostName,clPort) = _peerip(fIn);
	  Sf = self();

          outP = out_streamer(fOut,style);

	  HCl = __fork_(nullhandle,client,FM,_mailer(),true,
		{()->{
		      InP::sender==Sf <<;
		      P(hostName,clPort,InP,outP);
		      sio_end>>outP
	      }});

	  inP = in_streamer(fIn,HCl,style);

	  inP >> HCl;			-- send the correct input stream

          new_connection(HCl)>>client;
        } onerror
          Error -> Error~~[replyTo(creator())]>>client
      }
    } onerror 
        error(C,X) -> 
          error(C,X)~~[replyTo(creator())] >> client
  };


  /* A basic directory manager process */
  dir_manager(path,rights)
  {
    _set_file_manager(self());		/* We are our own file manager */

    std_in = spawn {
	  'in_ok>>creator();
          reader(__stdfile(0))
        };

    std_out = spawn {
	  'out_ok>>creator();
          writer(__stdfile(1))
	};
    std_err = spawn {
	  'err_ok>>creator();
	  writer(__stdfile(2))
	};

    receive{				/* pick up the synchronizations */
      'in_ok ->>
        {
	  receive{
	  'out_ok ->> {
            receive{
	      'err_ok ->> {}
	    }
	  }
	}
      }
    };

    sub_manager(path,rights,std_in,std_out,std_err)
  };

  sub_manager(cwd,rights,handle?std_in,handle?std_out,handle?std_err){
    path : cwd;
    sf = self();
    repeat {
      'stdin ->>
	std_in >> replyto

    | 'stdout ->> 
	std_out >> replyto

    | 'stderr ->> 
       std_err >> replyto
       
    | _open_(fn,_open_read) ->> {
	if _allow_read in rights then {		/* May we read ? */
	  fname = __mergeURL(path,fn);	        /* Compute full name */
          if __ffile(fname) then {		/* File exists */
	    spawn reader(__open(fname,_open_read)) >> replyto
          }
          else
            error("file '"++fname++"' not found",'fail) >> replyto
        }
        else
          error("permission denied",'privileged) >> replyto
      }

    | _open_(fn,_open_write) ->> {
	if _allow_write in rights then {	/* May we write ? */
	  fname = __mergeURL(path,fn);	        /* Compute full name */
          if __ffile(fname) then {		/* File exists */
	    spawn writer(__open(fname,_open_write)) >> replyto
          }
          else
            error("file '"++fname++"' not found",'fail) >> replyto
        }
        else
          error("permission denied",'privileged) >> replyto
      }

    | _open_(fn,_open_read_write)  ->> {
	if _allow_read in rights && _allow_write in rights then {
	  fname = __mergeURL(path,fn);	        /* Compute full name */
          if __ffile(fname) then {			/* File exists */
            spawn {
	     fd = __open(fname,_open_read_write);
	     reader_writer(fd,spawn reader(fd))
	    } >> replyto
          }
          else
            error("file '"++fname++"' not found",'fail) >> replyto
        }
        else
          error("permission denied",'privileged) >> replyto
      }

    | _open_(fn,_create_write)  ->> {
        if _allow_write in rights then {		/* May we write ? */
	  fname = __mergeURL(path,fn);	        /* Compute full name */
          spawn writer(__open(fname,_create_write)) >> replyto
        }
        else
          error("permission denied",'privileged) >> replyto
      }

    | _open_(fn,_open_append)  ->> {
        if _allow_write in rights then {		/* May we write ? */
	  fname = __mergeURL(path,fn);	        /* Compute full name */
          spawn writer(__open(fname,_open_append)) >> replyto
        }
        else
          error("permission denied",'privileged) >> replyto
      }

    | _open_(fn,_create_append)  ->> {
        if _allow_write in rights then {		/* May we write ? */
	  fname = __mergeURL(path,fn);	        /* Compute full name */
          spawn writer(__open(fname,_create_append)) >> replyto
        }
        else
          error("permission denied",'privileged) >> replyto
      }

    | _s_open_(fn,_open_read,style,cl) ->> {
	if _allow_read in rights then {		/* May we read ? */
	  fname = __mergeURL(path,fn);	/* Compute full name */

          if __ffile(fname) then {			/* File exists */
	    in_streamer(__open(fname,_open_read),cl,style) >> replyto
          }
          else
            error("file '"++fname++"' not found",'fail) >> replyto
        }
        else
          error("permission denied",'privileged) >> replyto
      }

    | _s_open_(fn,FM::FM in [_open_write,_create_write,_open_append,
			     _create_append],style,cl) ->> {
	if _allow_write in rights then {		/* May we write ? */
          try{
	    fname = __mergeURL(path,fn);	/* Compute full name */

	    out_streamer(__open(fname,FM),style) >> replyto
	  }
	  onerror
	    error(E,C) -> error(E,C) >> replyto
        }
        else
          error("permission denied",'privileged) >> replyto
      }

    | _popen_(cmd, args, env) ->> {	/* Open pipe */
        if _allow_pipe in rights then {	/* Not always permitted */
          try {
            (inPipe,outPipe,errPipe) .= __popen(cmd,args,env);

	    _pipe_( spawn reader(outPipe), spawn writer(inPipe), spawn reader(errPipe)) >> replyto
 	  }
          onerror
	    error(E,C) -> error(E,C) >> replyto
        }
        else
          error("permission denied",'privileged) >> replyto
      }
         
    | _open_dir_(dir,modes)  ->> {
	try{
	  fn = __mergeURL(path,dir);
          if __ffile(fn) then 			/* Directory exists */
            spawn {sub_manager(fn++"/",modes/\rights,std_in,std_out,std_err)}
		>> replyto
          else
            error("directory '"++dir++"' not found",'fail) >> replyto
        }
	onerror {
          X -> error("could not open directory '"++dir++"'",'fail) >> replyto
        }
      }

    | _filename_(nm)  ->> {
	  __mergeURL(path,nm) >> replyto
	onerror
	  Error -> Error >> replyto 	/* report an error */
      }
    | _file_(nm)  ->> {
	  __ffile(__mergeURL(path,nm)) >> replyto
	onerror
	  Error -> Error >> replyto	/* report an error */
      }

    | _stat_(nm)  ->> {
          __stat(__mergeURL(path,nm)) >> replyto
	onerror
	  Error -> Error >> replyto	/* report an error */
      }

    | _rm_(nm)  ->> {
	  __rm(__mergeURL(path,nm)); 'rm_ok >> replyto
	onerror
	  Error -> Error >> replyto 	/* report an error */
      }

    | _cd_(nm)  ->> {			/* attempt to change wd */
	{ pth = __mergeURL(path,nm);
	  if __file_type(pth)==_directory then {
	    path:=pth++"/"; 'cd_ok >> replyto
          }
	  else
            error("'"++nm++"'is not a directory",'inval) >> replyto
        }
	onerror				/* cant go above root path */
	  Error -> Error >> replyto 	/* report an error */
      }

    | _mv_(old,new)  ->> {
	{ __mv(__mergeURL(path,old),
	       __mergeURL(path,new)); 'mv_ok >> replyto }
	onerror				/* cant go above root path */
	  Error -> Error >> replyto 	/* report an error */
      }

    | _pwd_ ->>{		/* what is our working directory? */
	  path >> replyto
      }

    | _fmode_(name)  ->> {
	  ('_fmode_, __fmode(__mergeURL(path,name)))>>replyto
	onerror				/* cant go above root path */
	  Error -> Error >> replyto 	/* report an error */
      }

    | _chmod_(name,mode)  ->> {
        { __chmod(__mergeURL(path,name),mode);
	  'chmod_ok >> replyto
        } 
        onerror
	  Error -> Error >> replyto	/* report an error */
      }

    | _mkdir_(name,mode)  ->> {
	if _allow_write in rights then {
          { __mkdir(__mergeURL(path,name),mode);
		'mkdir_ok >> replyto } 
          onerror
	    Error -> Error >> replyto	/* report an error */
	}
	else
	  error("permission denied",'privileged) >> replyto
      }

    | _rmdir_(name)  ->> {
	if _allow_write in rights then {
          { __rmdir(__mergeURL(path,name)); 'rmdir_ok >> replyto } 
          onerror
	    Error -> Error >> replyto 	/* report an error */
	}
	else
	  error("permission denied",'privileged) >> replyto
      }

    | _ls_(dir)  ->> {
	if _allow_read in rights then {
	  { __ls(__mergeURL(path,dir)) >> replyto }
	  onerror
	    Error -> Error >> replyto 	/* report an error */
	}
	else
	  error("permission denied",'privileged) >> replyto
      }

    | _file_type_(pth)  ->> {
	if _allow_read in rights then {
	  { __file_type(__mergeURL(path,pth)) >> replyto }
	  onerror
	    Error -> Error >> replyto 	/* report an error */
	}
	else
	  error("permission denied",'privileged) >> replyto
      }

    | _connect_(hostName,port)  ->> {
        if _allow_connect in rights then {
	  try {
            (fIn,fOut) = _connect(hostName,port);	/* connect to server */
            _connection_(spawn reader(fIn), spawn writer(fOut)) >> replyto
	                }
          onerror 
	    Error -> Error >> replyto 	/* report an error */
        }
        else
	  error("permission denied",'privileged) >> replyto
      }

    | _s_connect_(hostName,port,style,cl)  ->> {
        if _allow_connect in rights then {
	  try {
	   (fIn,fOut) = _connect(hostName,port);	/* connect to server */

            _connection_(in_streamer(fIn,cl,style),out_streamer(fOut,style))
	      >> replyto
	  }
          onerror 
	    Error -> Error >> replyto 	/* report an error */
        }
        else
	  error("permission denied",'privileged) >> replyto
      }

    | _server_(port,P)  ->> {
        if _allow_listen in rights then
	  _ := spawn _server(port,P,replyto,sf)
        else
	  error("permission denied",'privileged) >> replyto
      }

    | _s_server_(port,P,style)  ->> {
        if _allow_listen in rights then
	  _ := spawn _s_server(port,P,replyto,style,sf)
        else
	  error("permission denied",'privileged) >> replyto
      }

    | other ->> 
       error("Unknown command: "++other^0,'inval) >> replyto

    } until '_quit_ :: sender== creator();
  };


} export (dir_manager);
